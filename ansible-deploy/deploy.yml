---
- hosts: maluki-webservers
  vars_files:
    - vars.yml
  gather_facts: false
  become: yes

  tasks:
    - name: Install virtualenv
      pip: name=virtualenv executable=pip3

    - name: Clone repository from github
      git:
        repo: "{{ project_repo }}"
        dest: "{{ install_root }}/{{ project_name }}/"
        accept_hostkey: yes
        force: yes
        version: elasticsearch 

    - name: Manually create the initial virtualenv
      command: virtualenv {{ install_root }}/{{ project_name }}/myenv -p python3.6 creates="{{ install_root }}/{{ project_name }}/myenv"

    - name: activate virtualenv
      shell:
        cmd: |
           . {{ install_root }}/{{ project_name }}/myenv/bin/activate  

    - name: Install requirements
      pip: 
       requirements=/{{ install_root }}/{{ project_name }}/requirements.txt 
       virtualenv=/{{ install_root }}/{{ project_name }}/myenv

    - name: copy nginx config
      template: src=files/nginx.j2 dest=/etc/nginx/sites-enabled/{{ project_name }}.conf
      notify:
      - restart nginx

    - name: django migrate
      django_manage:
        command: migrate
        app_path: "{{ install_root }}/{{ project_name }}/"
        virtualenv: "{{ install_root }}/{{ project_name }}/myenv"

    - name: django collectstatic
      django_manage:
        command: collectstatic
        app_path: "{{ install_root }}/{{ project_name }}/"
        virtualenv: "{{ install_root }}/{{ project_name }}/myenv"    

    #     # Installing certbot ssl  certificate
    # - name: Add Certbot
    #   apt_repository:
    #     repo: 'ppa:certbot/certbot'
    #     state: present
    #     update-cache: yes

    # - name: Install python-certbot
    #   apt: name=python-certbot-nginx state=present
    
    # - name: Allow UFW
    #   ufw:
    #     state: enabled

    # - name: Allow OpenSSH
    #   ufw:
    #     rule: allow
    #     name: OpenSSH

    # - name: Allow Nginx Full
    #   ufw:
    #     rule: allow
    #     name: Nginx Full

    # - name: Enable https
    #   shell:
    #     "certbot --nginx --noninteractive --agree-tos --email johnmaluki58@gmail.com -d mumyi.online"    
    #   become: yes

    # - name: Restart nginx to make changes
    #   service:
    #     name: nginx
    #     state: restarted
    # # end of adding certbot

    # # Create an initial superuser.
    # - django_manage:
    #     command: "createsuperuser --noinput --username=maluki --email=john@mumyi.online "
    #     app_path: "{{ install_root }}/{{ project_name }}/" 
    #     virtualenv: "{{ install_root }}/{{ project_name }}/myenv"   

    - name: django collectstatic
      django_manage: 
        command: collectstatic 
        app_path: "{{ install_root }}/{{ project_name }}/"
        virtualenv: "{{ install_root }}/{{ project_name }}/myenv"

    - name: copy gunicorn config
      template: src=files/gurnicorn.conf.j2 dest=/etc/systemd/system/gunicorn.service
      notify:
      - restart gunicorn

    - name: make sure nginx server is running
      service: name=nginx state=started enabled=yes

    - name: make sure gunicorn server is running
      service: name=gunicorn state=started enabled=yes

  handlers: 
    - name: restart nginx
      service: name=nginx state=restarted

    # - name: restart gunicorn
    #   service: name=gunicorn state=restarted
    - name: restart gunicorn
      systemd:
          name=gunicorn
          daemon_reload=yes
          enabled=yes
          state=restarted
# vim:ft=ansible: